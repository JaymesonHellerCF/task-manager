// Generated by Copilot
import { test, expect, request } from "@playwright/test";

const apiBase = "http://localhost:8080/api/tasks";

test("API: create, get, mark done, update, and delete a task", async ({
  request,
  playwright,
}) => {
  // Create a new task
  const createRes = await request.post(apiBase, {
    data: { title: "API Task" },
    headers: { "Content-Type": "application/json" },
  });
  expect(createRes.status()).toBe(201);
  const created = await createRes.json();
  expect(created.title).toBe("API Task");
  expect(created.done).toBeFalsy();

  // UI screenshot after creation
  const browser = await playwright.chromium.launch();
  const page = await browser.newPage();
  await page.goto("http://localhost:8080");
  await page.screenshot({ path: "../test-results/api-after-create.png" });
  await browser.close();

  // Get all tasks
  const getRes = await request.get(apiBase);
  expect(getRes.status()).toBe(200);
  const allTasks = await getRes.json();
  expect(allTasks.some((t) => t.id === created.id)).toBeTruthy();

  // Update the task
  const updateRes = await request.put(`${apiBase}/${created.id}`, {
    data: { title: "API Task Updated" },
    headers: { "Content-Type": "application/json" },
  });
  expect(updateRes.status()).toBe(200);
  const updated = await updateRes.json();
  expect(updated.title).toBe("API Task Updated");

  // UI screenshot after update
  const browser2 = await playwright.chromium.launch();
  const page2 = await browser2.newPage();
  await page2.goto("http://localhost:8080");
  await page2.screenshot({ path: "../test-results/api-after-update.png" });
  await browser2.close();

  // Mark as done
  const doneRes = await request.patch(`${apiBase}/${created.id}/done`);
  expect(doneRes.status()).toBe(204);

  // UI screenshot after marking done
  const browser3 = await playwright.chromium.launch();
  const page3 = await browser3.newPage();
  await page3.goto("http://localhost:8080");
  await page3.screenshot({ path: "../test-results/api-after-done.png" });
  await browser3.close();

  // Delete the task
  const delRes = await request.delete(`${apiBase}/${created.id}`);
  expect([204, 200, 202]).toContain(delRes.status());

  // UI screenshot after deletion
  const browser4 = await playwright.chromium.launch();
  const page4 = await browser4.newPage();
  await page4.goto("http://localhost:8080");
  await page4.screenshot({ path: "../test-results/api-after-delete.png" });
  await browser4.close();

  // Confirm deletion
  const getAfterDel = await request.get(apiBase);
  const tasksAfter = await getAfterDel.json();
  expect(tasksAfter.some((t) => t.id === created.id)).toBeFalsy();

  // Cleanup: remove all tasks
  for (const t of tasksAfter) {
    await request.delete(`${apiBase}/${t.id}`);
  }
});

test("API: get top N tasks", async ({ request }) => {
  // Add 3 tasks
  for (let i = 1; i <= 3; i++) {
    await request.post(apiBase, {
      data: { title: `Top Task ${i}` },
      headers: { "Content-Type": "application/json" },
    });
  }
  // Get top 2
  const res = await request.get(`${apiBase}/top?n=2`);
  expect(res.status()).toBe(200);
  const topTasks = await res.json();
  expect(topTasks.length).toBeLessThanOrEqual(2);

  // Cleanup: remove all tasks
  const all = await request.get(apiBase);
  const allTasks = await all.json();
  for (const t of allTasks) {
    await request.delete(`${apiBase}/${t.id}`);
  }
});
