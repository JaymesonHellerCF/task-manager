// Generated by Copilot
import { test, expect } from "@playwright/test";

// Helper to add a task and return its title
async function addTask(page, title) {
  await page.goto("http://localhost:8080");
  await expect(page).toHaveTitle(/Task Manager/);
  await page.fill('input[name="title"]', title);
  await page.click('button[type="submit"]');
  await page.waitForSelector(`.task-title:has-text("${title}")`);
}

test("Add a new task and verify it appears in the list", async ({ page }) => {
  await addTask(page, "Test Task 1");
  await expect(
    page.locator(".task-title", { hasText: "Test Task 1" })
  ).toBeVisible();
  await page.screenshot({ path: "../test-results/ui-add-task.png" });
  // Cleanup: remove all tasks
  await page.goto("http://localhost:8080");
  const doneButtons = await page.$$('button:has-text("Done")');
  for (const btn of doneButtons) {
    await btn.click();
    await page.waitForTimeout(100); // allow UI to update
  }
});

test("Mark a task as done and verify it disappears from the list", async ({
  page,
}) => {
  const title = "Task to Complete";
  await addTask(page, title);
  const taskItem = page.locator(".task-item", {
    has: page.locator(`.task-title:has-text("${title}")`),
  });
  await page.screenshot({ path: "../test-results/ui-before-done.png" });
  await taskItem.locator('button:has-text("Done")').click();
  await expect(page.locator(".task-title", { hasText: title })).toHaveCount(0);
  await page.screenshot({ path: "../test-results/ui-after-done.png" });
  // Cleanup: remove all tasks
  await page.goto("http://localhost:8080");
  const doneButtons = await page.$$('button:has-text("Done")');
  for (const btn of doneButtons) {
    await btn.click();
    await page.waitForTimeout(100);
  }
});

test("Add multiple tasks and verify all appear", async ({ page }) => {
  const tasks = ["Task A", "Task B", "Task C"];
  for (const t of tasks) {
    await addTask(page, t);
  }
  await page.screenshot({ path: "../test-results/ui-multiple-tasks.png" });
  for (const t of tasks) {
    await expect(page.locator(".task-title", { hasText: t })).toBeVisible();
  }
  // Cleanup: remove all tasks
  await page.goto("http://localhost:8080");
  const doneButtons = await page.$$('button:has-text("Done")');
  for (const btn of doneButtons) {
    await btn.click();
    await page.waitForTimeout(100);
  }
});

test("Tasks do not appear after being marked done", async ({ page }) => {
  const title = "Task to Remove";
  await addTask(page, title);
  const taskItem = page.locator(".task-item", {
    has: page.locator(`.task-title:has-text("${title}")`),
  });
  await taskItem.locator('button:has-text("Done")').click();
  await expect(page.locator(".task-title", { hasText: title })).toHaveCount(0);
  await page.screenshot({ path: "../test-results/ui-after-remove.png" });
  // Cleanup: remove all tasks
  await page.goto("http://localhost:8080");
  const doneButtons = await page.$$('button:has-text("Done")');
  for (const btn of doneButtons) {
    await btn.click();
    await page.waitForTimeout(100);
  }
});
